#include <iostream>
#include <vector>

std::string longestPalindrome(std::string s) {
    int n = s.length();
    
    // Create a 2D vector to store palindrome information
    std::vector<std::vector<bool>> dp(n, std::vector<bool>(n, false));
    
    // All substrings of length 1 are palindromes
    for (int i = 0; i < n; ++i) {
        dp[i][i] = true;
    }

    int start = 0; // Start index of the longest palindromic substring
    int maxLength = 1; // Length of the longest palindromic substring
    
    // Check substrings of length 2
    for (int i = 0; i < n - 1; ++i) {
        if (s[i] == s[i + 1]) {
            dp[i][i + 1] = true;
            start = i;
            maxLength = 2;
        }
    }

    // Check substrings of length 3 or more
    for (int len = 3; len <= n; ++len) {
        for (int i = 0; i <= n - len; ++i) {
            int j = i + len - 1; // Ending index of the substring

            // Check if the substring is a palindrome and the characters at both ends match
            if (dp[i + 1][j - 1] && s[i] == s[j]) {
                dp[i][j] = true;
                start = i;
                maxLength = len;
            }
        }
    }

    // Extract the longest palindromic substring
    return s.substr(start, maxLength);
}

int main() {
    std::string input;
    std::cout << "Enter a string: ";
    std::cin >> input;

    std::string result = longestPalindrome(input);

    std::cout << "Longest palindromic substring: " << result << std::endl;

    return 0;
}
